using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Collections;
using System.Threading.Tasks;
using System.Globalization;
using System.Data;
using System.Reflection;



namespace LBSFramework.ControlesWPF
{
    /// <summary>
    /// Lógica de interacción para ucGrilla.xaml
    /// </summary>
    public partial class ucGrilla : UserControl
    {
        #region Declaracion de Eventos
        /********************************************************/
        public event EventHandler ucModificar;
        public event EventHandler ucBorrar;
        public event EventHandler ucItemSeleccionado;
        //public event EventHandler ucAprietaEnter;
        public event EventHandler ucAutoGeneratedColumns;
        public event EventHandler ucDobleClick;
        public event EventHandler ucImprimir;
        public event EventHandler check;
        public event EventHandler unCheck;
        public event EventHandler checkAll;
        public event EventHandler unCheckAll;
        public event EventHandler LoadingRow;
        //public event EventHandler ucChangeSelectedItem;
        /********************************************************/
        #endregion Fin Declaracion de Eventos

       // private bool _seleccionMultiple = false;
        private IList _listaDeGrilla;
        private double _imageSize = 16;
        
        /// <summary>
        /// Guarda la lista recibida en cargar grilla
        /// </summary>
        public IList ListaDeGrilla
        {
            get { return _listaDeGrilla; }
            set { _listaDeGrilla = value; }
        }

        public double heightGrilla
        {
            get { return dtgGrilla.Height; }
            set { dtgGrilla.Height = value; }
        }

        public double widthGrilla
        {
            get { return dtgGrilla.Width; }
            set { dtgGrilla.Width = value; }
        }

        public double minWidtGrilla
        {
            get { return dtgGrilla.MinWidth; }
            set { dtgGrilla.MinWidth = value; }
        }

        public DataGrid oDataGrid
        {
            get
            {
                return (dtgGrilla);
            }

            set
            {
                dtgGrilla = value;
            }
        }

        public double imageSize
        {
            get { return _imageSize; }
            set { _imageSize = value; }
        }


        /// <summary>
        /// Constructor
        /// </summary>
        public ucGrilla()
        {
            InitializeComponent();

            //Insertamos las dos columnas al inicio con la imagen de Modificar o Eliminar
            //Aplica Plantilla celda
            DataGridTemplateColumn statusColumn = new DataGridTemplateColumn { MinWidth = _imageSize, MaxWidth = _imageSize, Width = _imageSize }; ;
            statusColumn.CellTemplateSelector = new DataTemplateEditableBase();
            statusColumn.Header = "Editar";
            DataTemplate tempEdit = new DataTemplate();
            tempEdit.VisualTree = new FrameworkElementFactory(typeof(TextBlock));
            tempEdit.VisualTree.SetValue(TextBlock.TextProperty, "");
            statusColumn.HeaderTemplate = tempEdit;
            dtgGrilla.Columns.Insert(dtgGrilla.Columns.Count, statusColumn);



            //Aplica Plantilla celda
            DataGridTemplateColumn BorrableColumn = new DataGridTemplateColumn { MinWidth = _imageSize, MaxWidth = _imageSize, Width = _imageSize }; ;
            BorrableColumn.CellTemplateSelector = new DataTemplateBorrableBase();
            BorrableColumn.Header = "Borrar";
            DataTemplate tempBorrar = new DataTemplate();
            tempBorrar.VisualTree = new FrameworkElementFactory(typeof(TextBlock));
            tempBorrar.VisualTree.SetValue(TextBlock.TextProperty, "");
            BorrableColumn.HeaderTemplate = tempBorrar;
            dtgGrilla.Columns.Insert(dtgGrilla.Columns.Count, BorrableColumn);


            //DataGridTemplateColumn btnCheck = new DataGridTemplateColumn { MinWidth = _imageSize, MaxWidth = _imageSize, Width = _imageSize }; ; 
            DataGridTemplateColumn btnCheck = new DataGridTemplateColumn(); 
            btnCheck.CellTemplateSelector  = new DataTemplateSeleccionableBase();
            btnCheck.Header = "Seleccion";
            
            DataTemplate temp = new DataTemplate();
            temp.VisualTree = new FrameworkElementFactory(typeof(CheckBox));
            temp.VisualTree.SetValue( CheckBox.IsCheckedProperty, false);

            temp.VisualTree.SetValue(CheckBox.IsEnabledProperty, true);
            
            temp.VisualTree.AddHandler(CheckBox.CheckedEvent,new RoutedEventHandler(chkSelectAll_Checked));
            temp.VisualTree.AddHandler(CheckBox.UncheckedEvent, new RoutedEventHandler(chkSelectAll_Unchecked));
            btnCheck.HeaderTemplate = temp;
            
            dtgGrilla.Columns.Insert(dtgGrilla.Columns.Count, btnCheck);

         
            
            //Aplica Plantilla celda
            DataGridTemplateColumn ImprimibleColumn = new DataGridTemplateColumn { MinWidth = _imageSize, MaxWidth = _imageSize, Width = _imageSize }; ;
            ImprimibleColumn.CellTemplateSelector = new DataTemplateImprimibleBase();
            ImprimibleColumn.Header = "Imp";
            DataTemplate tempImp = new DataTemplate();
            tempImp.VisualTree = new FrameworkElementFactory(typeof(TextBlock));
            tempImp.VisualTree.SetValue(TextBlock.TextProperty, "");
            ImprimibleColumn.HeaderTemplate = tempImp;
            dtgGrilla.Columns.Insert(dtgGrilla.Columns.Count, ImprimibleColumn);

            
        }//Fin ucGrilla

        public void EstiloFila(DataGridRow fila,Brush color)
        {
            fila.Background = color;
        }

        public void CargoGrilla(IList oLista)
        {
            //Cargamos la Grilla
            dtgGrilla.ItemsSource = null;
            dtgGrilla.ItemsSource = oLista;
            _listaDeGrilla = oLista;
            OcultarColumnas();
            
       }//Fin CargoGrilla


        public void OcultarIconos(bool borrable = true,bool editable = true, bool imprimir = true,bool seleccionable = true)
        {
            
            //Recorremos la Grilla para ocultar  las columnas Booleanas Editable y Borrable y la Columna de Identificador
            for (int i = 0; i < dtgGrilla.Columns.Count; i++)
            {

                //if (dtgGrilla.Columns[i].Header == null || (borrable && dtgGrilla.Columns[i].Header.ToString() == "Borrar") || (editable && dtgGrilla.Columns[i].Header.ToString() == "Editar") || (seleccionable && dtgGrilla.Columns[i].Header.ToString() == "Seleccion") || (imprimir && dtgGrilla.Columns[i].Header.ToString() == "Imp"))
                if (dtgGrilla.Columns[i].Header == null || (borrable && dtgGrilla.Columns[i].Header.ToString() == "Borrar") || (editable && dtgGrilla.Columns[i].Header.ToString() == "Editar") || (seleccionable && dtgGrilla.Columns[i].Header.ToString() == "Seleccion") || (imprimir && dtgGrilla.Columns[i].Header.ToString() == "Imp"))
                {
                        dtgGrilla.Columns[i].Visibility = System.Windows.Visibility.Collapsed;
                }
                if (dtgGrilla.Columns[i].Header == null || (!borrable && dtgGrilla.Columns[i].Header.ToString() == "Borrar") || (!editable && dtgGrilla.Columns[i].Header.ToString() == "Editar") || (!seleccionable && dtgGrilla.Columns[i].Header.ToString() == "Seleccion") || (!imprimir && dtgGrilla.Columns[i].Header.ToString() == "Imp"))
                {
                    dtgGrilla.Columns[i].Visibility = System.Windows.Visibility.Visible;
                }
            }
        }

      
        //public void MostrarIconos(bool borrable = true, bool editable = true, bool imprimir = true, bool seleccionable = true)
        //{
        //    //Recorremos la Grilla para ocultar  las columnas Booleanas Editable y Borrable y la Columna de Identificador
        //    for (int i = 0; i < dtgGrilla.Columns.Count; i++)
        //    {
        //        //if (dtgGrilla.Columns[i].Header == null || (borrable && dtgGrilla.Columns[i].Header.ToString() == "Borrar") || (editable && dtgGrilla.Columns[i].Header.ToString() == "Editar") || (seleccionable && dtgGrilla.Columns[i].Header.ToString() == "Seleccion") || (imprimir && dtgGrilla.Columns[i].Header.ToString() == "Imp"))
        //        if (dtgGrilla.Columns[i].Header == null || (borrable && dtgGrilla.Columns[i].Header.ToString() == "Borrar") || (editable && dtgGrilla.Columns[i].Header.ToString() == "Editar") || (seleccionable && dtgGrilla.Columns[i].Header.ToString() == "hCheck") || (imprimir && dtgGrilla.Columns[i].Header.ToString() == "Imp"))
        //        {
        //            dtgGrilla.Columns[i].Visibility = System.Windows.Visibility.Visible;
        //        }
        //    }
        //}

      

        /// <summary>
        /// Evento que ocurre cuando aprieta en la imagen de Modificar, si es Modificable la Fila se dispara el Evento externo
        /// Retorna la Fila Seleccionada
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dtgGrilla_ModificarMouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            //Evalua que la fila sea modificable
            if (dtgGrilla.CurrentCell.Item is Entitys.Entity)
            {
                if (((Entitys.Entity)dtgGrilla.CurrentCell.Item).Editable)
                    if (ucModificar != null)
                        ucModificar(dtgGrilla.SelectedItem, e);
            }
        }//Fin dtgGrilla_ModificarMouseRightButtonUp


        /// <summary>
        /// Evento que ocurre cuando aprieta en la imagen de Eliminar, si es Borrable la Fila se dispara el Evento externo
        /// Retorna el Objeto de la Fila seleccionada
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dtgGrilla_BorrarMouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (dtgGrilla.CurrentItem != null)
            {
                //Verifica que la Fila sea Borrable
                if (((Entitys.Entity)dtgGrilla.CurrentItem).Borrable)
                    if (ucBorrar != null)
                        ucBorrar(dtgGrilla.SelectedItem, e);
            }
        }//Fin dtgGrilla_BorrarMouseRightButtonUp


        


        //private void dtgGrilla_SeleccionarMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        //{
        //    int Ind = dtgGrilla.SelectedIndex;
        //    //Verifica que la Fila sea Borrable
        //    if (((Entitys.Entity)dtgGrilla.CurrentCell.Item).Seleccionable)
        //    {
        //        ((Entitys.Entity)dtgGrilla.CurrentCell.Item).Check = !((Entitys.Entity)dtgGrilla.CurrentCell.Item).Seleccionar;

        //        BitmapImage source = null;

        //        if (((Entitys.Entity)dtgGrilla.CurrentCell.Item).Seleccionar)
        //        {
        //            Uri uri = new Uri("pack://siteoforigin:,,,/Resources/SeleccionEnable.png");
        //            source = new BitmapImage(uri);
        //        }
        //        else
        //        {
        //            Uri uri = new Uri("pack://siteoforigin:,,,/Resources/SeleccionDisable.png");
        //            source = new BitmapImage(uri);
        //        }


        //        dtgGrilla.Items.Refresh();
        //        dtgGrilla.SelectedIndex = Ind;

        //        ((Image)sender).Source = source;
        //        source = null;
        //    }
        //}//Fin dtgGrilla_SeleccionarMouseRightButtonUp

        //public int CantSeleccionados()
        //{
        //    int cant = 0;

        //    foreach (var item in dtgGrilla.Items)
        //    {
        //        cant += (((LBSFramework.Entitys.Entity)dtgGrilla.Items[1]).Seleccionar) ? 1 : 0;                
        //    }

        //    return cant;
        //}

        public int Count()
        {
            return dtgGrilla.Items.Count;
        }

        

      //public void ImprimirTodos()
      //  {
      //      foreach (var item in dtgGrilla.Items)
      //      {
      //          ((LBSFramework.Entitys.Entity)dtgGrilla.Items[1]).Imprimir = true;
      //      }
      //      //dtgGrilla.Items.Refresh();
      //  }

        private void dtgGrilla_ImprimirMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {           
            int Ind = dtgGrilla.SelectedIndex;

            if (dtgGrilla.CurrentCell.Item is Entitys.Entity) {

                //Verifica que la Fila sea Imprimible
                if (((Entitys.Entity)dtgGrilla.CurrentCell.Item).Imprimible)
                {
                    if (ucImprimir != null)
                        ucImprimir(dtgGrilla.SelectedItem, e);
                }
            
            }
            
        }//Fin dtgGrilla_ImprimirMouseRightButtonUp

        /// <summary>
        /// Este metodo aplica el Estilo a las Columnas, Cambia el nombre para mostrar de la misma o la oculta
        /// </summary>
        /// <param name="oNombreCol"></param>
        /// <param name="oVisible"></param>
        /// <param name="oNombreVisible"></param>
        public void EstiloColumna(string oNombreCol, bool oVisible = true, string oNombreVisible = "", double ancho = double.NaN,int posicion = -1,HorizontalAlignment alineacion= System.Windows.HorizontalAlignment.Stretch)
        {
            //Esta consulta retorna el indice de la columna con oNombreCol
            var colum = (from c in dtgGrilla.Columns where c.Header != null && c.Header.ToString().ToUpper() == oNombreCol.ToUpper() select c).ToList<DataGridColumn>();
            if (colum.Count != 0)
            {
                //Se aplican los cambios
                colum[0].Visibility = oVisible ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed;

                DataTemplate tempEdit = new DataTemplate();
                tempEdit.VisualTree = new FrameworkElementFactory(typeof(TextBlock));

                if (oNombreCol != "Seleccion") 
                {
                    tempEdit.VisualTree.SetValue(TextBlock.TextProperty, oNombreVisible == "" ? oNombreCol : oNombreVisible);

                    tempEdit.VisualTree.SetValue(TextBlock.TextProperty, oNombreVisible == "" ? oNombreCol : oNombreVisible);

                    colum[0].HeaderTemplate = tempEdit;
                }
                
                
                //colum[0].Header = oNombreVisible == "" ? oNombreCol : oNombreVisible;
                if (colum[0].CellStyle == null) colum[0].CellStyle = CrearEstilo(ancho, colum[0],alineacion);
                if (posicion > -1)
                {
                   // colum[0].DisplayIndex = posicion + 1;
                    colum[0].DisplayIndex = posicion;
                }
                
            }
            
        }//Fin EstiloColumna
        /*_*/

        /// <summary>
        /// Recibe el modo de visibilidad y la aplica a todas la columnas, o a la que recibe por parámetro.
        /// </summary>
        /// <param name="Visibilidad"></param>
        /// <param name="NombreCol"></param>
        public void VisibilidadColumnas(System.Windows.Visibility Visibilidad, string NombreCol=null)
        {
            foreach (DataGridColumn  col in dtgGrilla.Columns)
            {
                if (NombreCol == null || col.Header.ToString() == NombreCol)
                    col.Visibility = Visibilidad;
            }
        }


        private void dtgGrilla_KeyDown(object sender, KeyEventArgs e)
        {
            if (dtgGrilla.CurrentItem != null)
            {
                if (e.Key == Key.Enter)
                {
                    if (ucDobleClick != null)
                        ucDobleClick(dtgGrilla.SelectedItem, e);
                    e.Handled = true;
                }
            }
        }


        /// <summary>
        /// Se ejecuta cuando se carga el UserControl
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dtgGrilla_Loaded(object sender, RoutedEventArgs e)
        {
            OcultarColumnas();
        }//Fin dtgGrilla_Loaded

        private void OcultarColumnas()
        {
            //Recorremos la Grilla para ocultar  las columnas Booleanas Editable y Borrable y la Columna de Identificador
            for (int i = 0; i < dtgGrilla.Columns.Count; i++)
            {
                if (dtgGrilla.Columns[i].Header != null)
                {
                    string h = dtgGrilla.Columns[i].Header.ToString();
                    if (h == "Identificador" ||
                        h == "Editable" ||
                        h == "Borrable" ||
                        h == "Seleccionable" ||
                        h == "Imprimible" ||
                        //h == "Seleccionar" ||
                        h == "Check" ||
                        h == "Imprimir")
                        dtgGrilla.Columns[i].Visibility = System.Windows.Visibility.Hidden;
                }
            }
        }

        private void dtgGrilla_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ucItemSeleccionado != null) 
                ucItemSeleccionado(dtgGrilla.SelectedItem, e);

        }//Fin dtgGrilla_SelectionChanged

        /// <summary>
        /// Retorna una lista con los objetos que han sido seleccionado
        /// </summary>
        /// <returns></returns>
        public List<object> SeleccionadosLista()
        {
            List<object> auxSeleccionado = new List<object>();
            //Recorro la lista de Items para crear la lista con los Seleccionados
            foreach (object i in dtgGrilla.Items) {
                if (((LBSFramework.Entitys.Entity)i).Check){
                    auxSeleccionado.Add(i);
                }
            }
            return auxSeleccionado;   
        }

        public void MarcarSeleccionados(List<LBSFramework.Entitys.PK> listSeleccionados)
        {
            foreach (var item in dtgGrilla.Items)
            {
                
                if (listSeleccionados.Exists(l => l == ((LBSFramework.Entitys.Entity)item).Identificador))
                    ((LBSFramework.Entitys.Entity)item).Check = true;
            }

            dtgGrilla.Items.Refresh();
        }

      

        public int SelectedIndex { 
                get { return dtgGrilla.SelectedIndex;}
                set { dtgGrilla.SelectedIndex = value; }
        }

        /// <summary>
        /// Crea un estilo para las celda de la grilla, por ahora solo crea la propiedad width
        /// </summary>
        /// <param name="ancho"></param>
        /// <returns></returns>
        private Style CrearEstilo(double ancho, DataGridColumn columna,HorizontalAlignment alineacion)
        {
            Style estilo = new System.Windows.Style(typeof(DataGridCell));

            if (ancho < double.MaxValue)
                estilo.Setters.Add(new Setter(DataGridCell.MinWidthProperty, ancho));
             
            if (alineacion != System.Windows.HorizontalAlignment.Stretch) // Esquivo la asignacio si viene stretch porque anda mal la asignacion del framework (sobre todo con left).
                estilo.Setters.Add(new Setter(DataGridCell.HorizontalAlignmentProperty, alineacion));
                
            //else
            //{ 
            //    double anchoColumns = 0;
            //    dtgGrilla.Columns.Where(col => (col.Visibility == System.Windows.Visibility.Visible)).ToList().ForEach(c => anchoColumns += c.ActualWidth);
            //    estilo.Setters.Add(new Setter(DataGridCell.WidthProperty, dtgGrilla.ActualWidth - anchoColumns - 8 + columna.ActualWidth));
            //}

            return estilo;
        }

        private void dtgGrilla_AutoGeneratedColumns(object sender, EventArgs e)
        {
            if (ucAutoGeneratedColumns != null)
                ucAutoGeneratedColumns(sender, e);
        }

        public void foco()
        {
            dtgGrilla.Focusable = true;
            dtgGrilla.Focus();
            if (dtgGrilla.Items.Count > 0)
            {
                dtgGrilla.SelectedIndex = 0;
            }
        }

        public object SelectedItem()
        {

            int i;
            if (dtgGrilla.Items.Count == 1) i = 0;
            else i = dtgGrilla.SelectedIndex;
            if (i >= 0)
                return dtgGrilla.Items[i];
            else return null;
        }

        private void dtgGrilla_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyType.FullName.IndexOf("System.DateTime") > -1)
            {
                ((DataGridTextColumn)e.Column).Binding.StringFormat = "{0:dd/MM/yyyy}";
            }
            else
                if  (e.PropertyType.FullName.IndexOf("System.Decimal") > -1)
                {
                    ((DataGridTextColumn)e.Column).Binding.StringFormat = "{0:F}";
                    if (e.Column.CellStyle == null)
                    {
                        e.Column.CellStyle = new System.Windows.Style(typeof(DataGridCell));
                    }
                    e.Column.CellStyle.Setters.Add(new System.Windows.Setter
                    {
                        Property = Control.HorizontalAlignmentProperty,
                        Value = HorizontalAlignment.Right
                    });
                    //((DataGridTextColumn)e.Column).CellStyle.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, TextAlignment.Right));
                    
                }
            e.Column.CanUserSort = true;
        }

        private void dtgGrilla_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            IInputElement element = e.MouseDevice.DirectlyOver;
            if (element != null && element is FrameworkElement)
            {
                if (((FrameworkElement)element).Parent is DataGridCell)
                {
                    if (sender != null && ((DataGrid)sender).CurrentItem != null && ucDobleClick != null)
                    {
                        if (dtgGrilla.CurrentCell.Column.Header.ToString() != "Editable" && dtgGrilla.CurrentCell.Column.Header.ToString() != "Borrable" && dtgGrilla.CurrentCell.Column.Header.ToString() != "Imprimible")
                        {
                            ucDobleClick(((DataGrid)sender).CurrentItem, e);
                        }
                    }
                }
            }
        }

        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
            try
            {
                ((Entitys.Entity)dtgGrilla.CurrentCell.Item).Check = true;
                if (check != null)
                    check(dtgGrilla.CurrentCell.Item, e);
            }
            catch
            { }
            
        }

        private void CheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            try
            {
                ((Entitys.Entity)dtgGrilla.CurrentCell.Item).Check = false;
                if (unCheck != null)
                    unCheck(dtgGrilla.CurrentCell.Item, e);
            }
            catch
            { }
        }

        private void chkSelectAll_Checked(object sender, RoutedEventArgs e) 
        {
            SeleccionarTodosCheck();
            if (checkAll != null)
                checkAll(SeleccionadosLista(), e);
        }

        private void chkSelectAll_Unchecked(object sender, RoutedEventArgs e)
        {
            SeleccionarTodosCheck(false);
            if (unCheckAll != null)
                unCheckAll(SeleccionadosLista(), e);
        }

        public void SeleccionarTodosCheck(bool valor = true)
        {
            foreach (var item in dtgGrilla.Items)
            {
              if (((LBSFramework.Entitys.Entity)item).Seleccionable)  ((LBSFramework.Entitys.Entity)item).Check = valor;
            }

            dtgGrilla.Items.Refresh();
        }

        public void SeleccionarTodos()
        {
            foreach (var item in dtgGrilla.Items)
            {
                ((LBSFramework.Entitys.Entity)item).Check = true;
            }

            dtgGrilla.Items.Refresh();
        }

        private void dtgGrilla_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            if (LoadingRow != null)
                LoadingRow(sender, e);
        }

       


    }

}